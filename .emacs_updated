;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

(package-initialize)
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

;; some changes

(diminish 'projectile-mode)

(global-anzu-mode +1)
(global-set-key [C-q] 'anzu-query-replace)

(define-key global-map [f9] 'previous-error)
(define-key global-map [f10] 'first-error)
(define-key global-map [f11] 'next-error)

(global-set-key (kbd "<f12>") 'toggle-frame-fullscreen)


;; minor changes
(tool-bar-mode -1)
(menu-bar-mode -1)
;; (setq make-backup-files nil)
;; (setq split-width-threshold nil)
;; (setq makefile-warn-suspicious-lines nil) 

;; @NOTE: There are lots of things to clean up in this init 

;; @Cleanup: I believe this is obselete and needs to be deleted 
;; (set-face-attribute 'region nil :background "#666")

;; Swtich to my-own starting buffer 
;; and display and image with text
;; make sure you have libpng.dll inside emacs/bin/ folder
(add-hook 'emacs-startup-hook 'my-startup-fcn)
(defun my-startup-fcn ()
  (let ((*ara_ara* (get-buffer-create "*ara_ara*")))
    (with-current-buffer *ara_ara*
      (insert "\n\n\n\n")
      (insert "                                                            " ) 
      (insert-image (create-image "C:/Users/ramsa/Desktop/emacs/my/fan.png")) 
      (insert "\n\n")
      (insert "	                                                  Unfortunately, there's a radio connected to my brain"))
    (switch-to-buffer *ara_ara*)))

;; Change here
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(global-set-key (kbd "C-x |") 'comment-or-uncomment-region-or-line)

;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; my themes ;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;

;; A Jonathan Blow emacs tribute 
;; written by yours truly. 

(deftheme Kristian_Ramsamooj_theme_2)
(custom-theme-set-faces
 'Kristian_Ramsamooj_theme_2
 (set-cursor-color "light green")
 '(fixed-pitch ((t (:family "Monospace"))))
 '(variable-pitch ((t (:family "Arial" :foundry "outline" :width normal :height 98 :weight normal :slant normal))))
 '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 '(minibuffer-prompt ((t (:weight bold :foreground "#708090"))))
 '(highlight ((t (:background "red"))))
 '(region ((t (:background "blue"))))
 '(shadow ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))
 '(secondary-selection ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 16) (background light)) (:background "yellow")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 8)) (:foreground "black" :background "cyan")) (t (:inverse-video t))))
 '(trailing-whitespace ((((class color) (background light)) (:background "red1")) (((class color) (background dark)) (:background "red1")) (t (:inverse-video t))))
 '(font-lock-builtin-face ((t (:foreground "#cfbfad"))))
 ;; change here was green4
 ;; change here was #3FDF1F
 '(font-lock-comment-delimiter-face ((t (:foreground "#3FDF1F"))))
 '(font-lock-comment-face ((t (:foreground "#3FDF1F"))))
 ;; change here they were both green3 
 '(font-lock-constant-face ((t (:foreground "#85ecd7"))))
 '(font-lock-doc-face ((t (:foreground "#cd8b00"))))
 '(font-lock-function-name-face ((t (:foreground "#e1f4ff"))))
 '(font-lock-keyword-face ((t (:foreground "#e1f4ff"))))
 '(font-lock-negation-char-face ((t nil)))
 '(font-lock-preprocessor-face ((t (:foreground "#ade6b3"))))
 '(font-lock-regexp-grouping-backslash ((t (:inherit (bold)))))
 '(font-lock-regexp-grouping-construct ((t (:inherit (bold)))))
;; string was this before  ;;#0BB6AB
 '(font-lock-string-face ((t (:foreground "#0fdfaf"))))
 '(font-lock-type-face ((t (:foreground "#ade6b3"))))
 '(font-lock-variable-name-face ((t (:foreground "#e1f4ff"))))
 '(font-lock-warning-face ((t (:foreground "#ffffff" :background "#ff0000"))))
 '(button ((t (:inherit (link)))))
 '(link ((((class color) (min-colors 88) (background light)) (:underline (:color foreground-color :style line) :foreground "RoyalBlue3")) (((class color) (background light)) (:underline (:color foreground-color :style line) :foreground "blue")) (((class color) (min-colors 88) (background dark)) (:underline (:color foreground-color :style line) :foreground "cyan1")) (((class color) (background dark)) (:underline (:color foreground-color :style line) :foreground "cyan")) (t (:inherit (underline)))))
 '(link-visited ((default (:inherit (link))) (((class color) (background light)) (:foreground "magenta4")) (((class color) (background dark)) (:foreground "violet"))))
 '(fringe ((t (:foreground "#cfbfad" :background "#1e1e27"))))
 '(header-line ((default (:inherit (mode-line))) (((type tty)) (:underline (:color foreground-color :style line) :inverse-video nil)) (((class color grayscale) (background light)) (:box nil :foreground "grey20" :background "grey90")) (((class color grayscale) (background dark)) (:box nil :foreground "grey90" :background "grey20")) (((class mono) (background light)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "black" :background "white")) (((class mono) (background dark)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "white" :background "black"))))
 '(tooltip ((t (:foreground "systeminfotext" :background "systeminfowindow" :inherit (variable-pitch)))))
 '(mode-line ((((class color) (min-colors 88)) (:foreground "black" :background "#b4a485" :box (:line-width -1 :color nil :style released-button))) (t (:inverse-video t))))
 ;; '(mode-line-emphasis ((t (:weight bold))))
 '(mode-line-highlight ((((class color) (min-colors 88)) (:box (:line-width 2 :color "blue" :style released-button))) (t (:inherit (highlight)))))
 ;; change here background color was #b4a485 how is grey70
 '(mode-line-inactive ((t (:foreground "black" :background "grey70"))))
 ;; change here was red now pink
 '(isearch ((t (:weight bold :foreground "#303030" :background "pink"))))
 '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "pink")) (((class color) (min-colors 8)) (:background "pink")) (((class color grayscale)) (:foreground "grey")) (t (:inverse-video t))))
 ;; Get rid of this in order to have a clear background while isearch 
 ;; '(lazy-highlight ((((class color) (min-colors 88) (background light)) (:background "blue")) (((class color) (min-colors 88) (background dark)) (:background "blue")) (((class color) (min-colors 16)) (:background "blue")) (((class color) (min-colors 8)) (:background "blue")) (t (:underline (:color foreground-color :style line)))))
 '(match ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "RoyalBlue3")) (((class color) (min-colors 8) (background light)) (:foreground "black" :background "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "white" :background "blue")) (((type tty) (class mono)) (:inverse-video t)) (t (:background "gray"))))
 '(next-error ((t (:inherit (region)))))
 '(query-replace ((t (:inherit (isearch)))))
 ;; #071c61
 ;; #052328
 '(default ((t (:inherit nil :stipple nil :background "#052328" :foreground "#b4a485" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "outline" :family "Consolas")))))

(provide-theme 'Kristian_Ramsamooj_theme_2)

;; separation 

;; Moe-theme
;; (require 'moe-theme)
;; (moe-light)
;; (moe-theme-set-color 'magenta)
;; (moe-dark)

;; Zenburn-theme
;; (load-theme 'zenburn t) 

;; Night-Owl-theme 
;; (require 'night-owl-theme) 
;; (set-face-foreground 'font-lock-comment-face "light pink")
;; (set-cursor-color "red")

;; my customized theme 

;; (deftheme Kristian_Ramsamooj_theme)
;; (custom-theme-set-faces
;;  'Kristian_Ramsamooj_theme
;;  '(cursor ((t (:foreground "#cfdfef" :background "#708090"))))
;;  '(fixed-pitch ((t (:family "Monospace"))))
;;  '(variable-pitch ((t (:family "Arial" :foundry "outline" :width normal :height 98 :weight normal :slant normal))))
;;  '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
;;  '(minibuffer-prompt ((t (:weight bold :foreground "#708090"))))
;;  '(highlight ((t (:background "#404040"))))
;;  '(region ((t (:background "#404040"))))
;;  '(shadow ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))
;;  '(secondary-selection ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 16) (background light)) (:background "yellow")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 8)) (:foreground "black" :background "cyan")) (t (:inverse-video t))))
;;  '(trailing-whitespace ((((class color) (background light)) (:background "red1")) (((class color) (background dark)) (:background "red1")) (t (:inverse-video t))))
;;  '(font-lock-builtin-face ((t (:foreground "#cfbfad"))))
;;  '(font-lock-comment-delimiter-face ((t (:foreground "#eee926"))))
;;  '(font-lock-comment-face ((t (:foreground "#eee926"))))
;;  '(font-lock-constant-face ((t (:foreground "#85ecd7"))))
;;  '(font-lock-doc-face ((t (:foreground "#cd8b00"))))
;;  '(font-lock-function-name-face ((t (:foreground "#e1f4ff"))))
;;  '(font-lock-keyword-face ((t (:foreground "#e1f4ff"))))
;;  '(font-lock-negation-char-face ((t nil)))
;;  '(font-lock-preprocessor-face ((t (:foreground "#ade6b3"))))
;;  '(font-lock-regexp-grouping-backslash ((t (:inherit (bold)))))
;;  '(font-lock-regexp-grouping-construct ((t (:inherit (bold)))))
;;  '(font-lock-string-face ((t (:foreground "#bcc1c5"))))
;;  '(font-lock-type-face ((t (:foreground "#ade6b3"))))
;;  '(font-lock-variable-name-face ((t (:foreground "#e1f4ff"))))
;;  '(font-lock-warning-face ((t (:foreground "#ffffff" :background "#ff0000"))))
;;  '(button ((t (:inherit (link)))))
;;  '(link ((((class color) (min-colors 88) (background light)) (:underline (:color foreground-color :style line) :foreground "RoyalBlue3")) (((class color) (background light)) (:underline (:color foreground-color :style line) :foreground "blue")) (((class color) (min-colors 88) (background dark)) (:underline (:color foreground-color :style line) :foreground "cyan1")) (((class color) (background dark)) (:underline (:color foreground-color :style line) :foreground "cyan")) (t (:inherit (underline)))))
;;  '(link-visited ((default (:inherit (link))) (((class color) (background light)) (:foreground "magenta4")) (((class color) (background dark)) (:foreground "violet"))))
;;  '(fringe ((t (:foreground "#cfbfad" :background "#1e1e27"))))
;;  '(header-line ((default (:inherit (mode-line))) (((type tty)) (:underline (:color foreground-color :style line) :inverse-video nil)) (((class color grayscale) (background light)) (:box nil :foreground "grey20" :background "grey90")) (((class color grayscale) (background dark)) (:box nil :foreground "grey90" :background "grey20")) (((class mono) (background light)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "black" :background "white")) (((class mono) (background dark)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "white" :background "black"))))
;;  '(tooltip ((t (:foreground "systeminfotext" :background "systeminfowindow" :inherit (variable-pitch)))))
;;  '(mode-line ((((class color) (min-colors 88)) (:foreground "black" :background "grey75" :box (:line-width -1 :color nil :style released-button))) (t (:inverse-video t))))
;;  '(mode-line-buffer-id ((t (:weight bold :foreground "#b9b9b9" :background "#3e3e5e"))))
;;  '(mode-line-emphasis ((t (:weight bold))))
;;  '(mode-line-highlight ((((class color) (min-colors 88)) (:box (:line-width 2 :color "grey40" :style released-button))) (t (:inherit (highlight)))))
;;  '(mode-line-inactive ((t (:foreground "#708090" :background "#3e3e5e"))))
;;  '(isearch ((t (:weight bold :foreground "#303030" :background "#cd8b60"))))
;;  '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) (:foreground "grey")) (t (:inverse-video t))))
;;  '(lazy-highlight ((((class color) (min-colors 88) (background light)) (:background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:background "paleturquoise4")) (((class color) (min-colors 16)) (:background "turquoise3")) (((class color) (min-colors 8)) (:background "turquoise3")) (t (:underline (:color foreground-color :style line)))))
;;  '(match ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "RoyalBlue3")) (((class color) (min-colors 8) (background light)) (:foreground "black" :background "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "white" :background "blue")) (((type tty) (class mono)) (:inverse-video t)) (t (:background "gray"))))
;;  '(next-error ((t (:inherit (region)))))
;;  '(query-replace ((t (:inherit (isearch)))))
;;  '(default ((t (:inherit nil :stipple nil :background "#292929" :foreground "#b4a485" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "outline" :family "Consolas")))))

;; (provide-theme 'Kristian_Ramsamooj_theme)

;; separation 

;; '(font-lock-comment-face ((t (:foreground "MediumAquamarine"))))

;; default-theme
;; (deftheme default-black "My_theme")

;; ;; Operator Fonts
;; (defface font-lock-operator-face
;;   '((t (:foreground "#FF0000"))) "Basic face for operator." :group 'basic-faces)

;; ;; ;; C-Like
;; ;; ;; (dolist (mode-iter '(c-mode c++-mode java-mode))
;; ;; ;;   (font-lock-add-keywords mode-iter
;; ;; ;;    '(("\\([~^&\|!<>=,.\\+*/%-]\\)" 0 'font-lock-operator-face keep))))

;; (dolist (mode-iter '(c-mode c++-mode java-mode rust-mode))
;;   (font-lock-add-keywords mode-iter
;;                           '(("\\([~^&\|!<>=,.:\\+*/%-]\\)" 0 'font-lock-operator-face keep))))

;; (custom-theme-set-faces
;;  'default-black
;;  ;; color of function names
;;  '(font-lock-function-name-face ((t (:foreground "#4bf6ff"))))
;;  ;; color of built in function names
;;  '(font-lock-builtin-face ((t (:foreground "#cfbfad"))))
;;  ;; change the data types of variables 
;;  '(font-lock-type-face ((t (:foreground "#f7fa57"))))
;;  ;; this is for stuff like for, if, while 
;;  ;; '(font-lock-keyword-face ((t (:foreground "yellow"))))
;;  '(font-lock-preprocessor-face ((t (:italic nil :foreground "#F5F5F5"))))
;;  '(font-lock-variable-name-face ((t (:foreground "white")))) 
;;  ;; for the names of constants, like 'NULL' in C.
;;  '(font-lock-constant-face ((t (:foreground "#7785f9" :weight bold))))
;;  ;; '(font-lock-constant-face ((((class color) (background dark)) (:bold t :foreground "DarkOrchid"))))
;;  ;; '(mode-line ((((class color) (min-colors 88)) (:foreground "black" :background "blue" :box (:line-width -1 :color nil :style released-button))) (t (:inverse-video t))))
;;  ;; '(mode-line-inactive ((t (:foreground "black" :background "grey75"))))

;;  ;; was yellow now #f7fa57
;;  '(shadow ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))

;;  ;; (set-frame-font "lucida console 11" nil t)
;;  ;; (set-frame-font "lucida console" nil t)
;;  (set-frame-font "Consolas-174" nil t)


;;  ;; #1A1110
;;  ;; #1B1B1B
;;  '(default ((t (:inherit nil :stipple nil :background "black" :foreground "#F5F5F5" :inverse-video nil :box nil :strike-t*hrough nil :overline nil :underline nil :slant normal :weight normal :width normal :height 105))))
;;  '(highlight ((((class color) (min-colors 88) (background dark)) (:background "#111111"))))
;;  (set-cursor-color "red")
;;  ;; was #464740
;;  '(region ((nil (:background "blue"))))
;;  '(hl-line ((nil (:background "#222222"))))
;;  '(yas-field-highlight-face ((nil (:background "#333399"))))
;;  '(fixed-pitch ((t (:family "Monospace"))))
;;  '(variable-pitch ((t (:family "Arial" :foundry "outline" :width normal :height 98 :weight normal :slant normal))))
;;  '(highlight-numbers-number ((t (:foreground "#f533ff"))))
;;  ;; '(highlight-numbers-number ((t (:foreground "white"))))
;;  '(js2-function-param-face ((t (:foreground "LightGoldenrod"))))
;;  '(font-lock-warning-face ((nil (:foreground "#ff6666"))))
;;  (set-face-foreground font-lock-string-face "#fb138b")
;;  ;; (set-face-foreground font-lock-comment-face "#6495ED")
;;  (set-face-foreground font-lock-comment-face "#3FDF1F")
;;  '(show-paren-match ((nil (:background "#333399")))) 
;;  '(show-paren-mismatch ((((class color)) (:background "red")))))

;; (provide-theme 'default-black)

;;;;;;;;;;;;;;;;;;;;;;;;
;;; end of my themes ;;; 
;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; Some changes ;;
;;;;;;;;;;;;;;;;;;

;; Taken and modified from Casey Muratori
;; Compilation: 
(setq my-buildscript "build.bat")
(require 'compile)

(setq split-width-threshold 1)

(setq compilation-context-lines 0)
(setq compilation-error-regexp-alist
    (cons '("^\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:fatal error\\|warnin\\(g\\)\\) C[0-9]+:" 2 3 nil (4))
     compilation-error-regexp-alist))

(defun find-project-directory-recursive ()
  "Recursively search for a makefile."
  (interactive)
  (if (file-exists-p my-buildscript) t
      (cd "../")
      (find-project-directory-recursive)))

(defun lock-compilation-directory ()
  "The compilation process should NOT hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked t)
  (message "Compilation directory is locked."))

(defun unlock-compilation-directory ()
  "The compilation process SHOULD hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked nil)
  (message "Compilation directory is roaming."))

(defun find-project-directory ()
  "Find the project directory."
  (interactive)
  (setq find-project-from-directory default-directory)
  (switch-to-buffer-other-window "*compilation*")
  (if compilation-directory-locked (cd last-compilation-directory)
  (cd find-project-from-directory)
  (find-project-directory-recursive)
  (setq last-compilation-directory default-directory)))

(defun make-without-asking ()
  "Make the current build."
  (interactive)
  (if (find-project-directory) (compile my-buildscript))
  (other-window -1))
(define-key global-map "\em" 'make-without-asking)

;; Save desktop sessions 
;; do a desktop-save, so we know what 
;; new sessions to save 
;; (desktop-load-default) 
;; (desktop-read)

;; line numbers 
;; Sometimes I like them ... 
;; Sometimes I don't ... 
(global-linum-mode t)
;; was yellow now #f7fa57
(set-face-foreground 'linum "#f7fa57")
(setq-default left-fringe-width  10)
(set-face-attribute 'fringe nil :background "black")

;; 80 column rule for c code
;(require 'fill-column-indicator)
;; (setq fci-rule-width 10)
;; (setq fci-rule-color "red")
;; (add-hook 'c-mode-hook 'fci-mode)
;; (add-hook 'c++-mode-hook 'fci-mode)
;; (setq-default fill-column 80)

;; Stop all that 3D shit 
(set-face-attribute 'mode-line nil :box nil)

;; Disable tooltip information
;; I know a thing or two about emacs 
(tooltip-mode nil)
(setq show-help-function nil)

(defun my-delete-word (arg)
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))

(defun my-backward-delete-word (arg)
  (interactive "p")
  (my-delete-word (- arg)))


;; Rebinding of highlighting the entire buffer
(global-set-key (kbd "C-x C-a") 'mark-whole-buffer)

;; unset the old highlight the entire buffer key
(global-set-key (kbd "C-x h") 'ignore)

;; unset the help key because it is annoying 
(global-set-key (kbd "C-x C-h") 'ignore)

;; Rebind C-backspace to delete from current cursor position 
;; to the end of the line without copying those contents 
;; into the kill-ring
(global-set-key (kbd "<C-backspace>") 'my-backward-delete-word)

;; redefining split window for convenience sake 
(define-key global-map (kbd "C-\'") 'split-window-right)

;; redefining switching windows for convenience sake 
(define-key global-map (kbd "C-;") 'other-window)

;; get rid of showing the system load average on the mode line
(setq display-time-default-load-average nil)

;; function for forced indentation 
;; C-f indents and now M-f forces indentation 
;; when emacs gets confused
(defun region-line-beg ()
  (if (region-active-p)
      (save-excursion (goto-char (region-beginning)) (line-beginning-position))
    (line-beginning-position)))
(defun region-line-end ()
  (if (region-active-p)
      (save-excursion (goto-char (region-end)) (line-end-position))
    (line-end-position)))
(defun keyboard-indent (&optional arg)
  (interactive)
  (let ((deactivate-mark nil))  ; keep region
    (indent-rigidly (region-line-beg) (region-line-end) (* (or arg 1) tab-width))))
(defun keyboard-unindent (&optional arg)
  (interactive)
  (keyboard-indent (* -1 (or arg 1))))

;; function for overriding key mappings in 
;; certain modes to keys that I actually want
;; Will expand in the future when I'm not lazy 
(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-d") 'kill-whole-line)
    map))

(define-minor-mode my-keys-minor-mode
  :init-value t
  :lighter " my-keys")

(my-keys-minor-mode 1)

;; disable the use of the right mouse button 
;; since <|highlight + right-mouse = delete|> 
(global-set-key [down-mouse-3] 'ignore)

;; turn off hungry backspace? 
(global-unset-key [(control backspace)])

;; disable mouse middle scrolling button click
;; which just pastes a region
(global-set-key [mouse-2] 'ignore)

;; Multiple-Cursors mode C-M-c 
(require 'multiple-cursors)
(global-set-key (kbd "C-M-c") 'mc/edit-lines)

;; Highlight and keep highlighted each 
;; instance of isearch 
(setq lazy-highlight-cleanup nil)

;; Unbind Pesky Sleep Button and rebind it to M-[ M-]
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
(global-set-key (kbd "M-[ M-]") 'suspend-frame)

;; unbind the default emacs quit option 
(global-unset-key [(control x)(control c)])

;; rebind the quit command
(global-set-key (kbd "M-p M-p") 'save-buffers-kill-terminal)

;; disable whatever this thing is 
(global-set-key (kbd "C-<next>") 'ignore)

;; disable this annoying thing
(global-set-key (kbd "C-l") 'ignore)

;; disable PgUp key
;; (global-set-key (kbd "<next>") 'ignore)

;; disable PgDn key
;; (global-set-key (kbd "<prior>") 'ignore)

;; go to previous cursor position 
;; (global-set-key (kbd "C-o") 'pop-global-mark)

;; forced indentation
(global-set-key (kbd "M-f") 'keyboard-indent)

;; forward a word 
(global-set-key (kbd "M-w") 'forward-word)

;;backward a word
(global-set-key (kbd "M-q") 'backward-word)

;; highlight the current line
;; where the cursor is on
;; (global-hl-line-mode 1)
;; (set-face-background 'hl-line "midnight blue")

;; Stop Emacs from losing undo information by
;; setting very high limits for undo buffers
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)

;; display how much battery is left 
(display-battery-mode 1)

;; change the color of numbers in programming modes 
(add-hook 'prog-mode-hook 'highlight-numbers-mode)

;; @Cleanup: This needs to be deleted 
;; insertion mode 
;; press to lock buffer to read only-mode
;;(global-set-key (kbd "C-i") 'read-only-mode)

;; changing inner contents similar
;; to Vim's ci command 
(require 'change-inner)
(global-set-key (kbd "M-i") 'change-inner)
(global-set-key (kbd "M-o") 'change-outer)

;; Delete selected(highlighted) region by typing
;; (delete-selection-mode 1)

;; re-binding of the meta key 
(setq alt 'meta) 

;; change the default directory for emacs
(setq default-directory "C:Users/ramsa/Desktop/")

;; disable abbreviations mode 
(setq save-abbrevs 'slient) 

;; disable ~backup
(setq backup-inhibited t)

;; disable #autosave#
(setq auto-save-default nil)

;; open emacs in fullscreen mode 
;; (toggle-frame-fullscreen) 

;; ace window
(global-set-key (kbd "C-x p") 'ace-window)
;;(setq aw-background nil)

;; refresh emacs after changes on the disk 
(global-auto-revert-mode t)

;; rebind-ing of the yank-pop command
(global-set-key (kbd "M-v") 'yank-pop)

;; scroll up one line 
(global-set-key (kbd "M-<down>") 'scroll-up-line)

;; scroll down one line 
(global-set-key (kbd "M-<up>") 'scroll-down-line)

;; beginning of buffer
;; (global-set-key (kbd "M-,") 'beginning-of-buffer)

;; end of buffer
;; (global-set-key (kbd "M-.") 'end-of-buffer)

;; query replace
(global-set-key (kbd "C-q") 'query-replace)

;; goto line number
(global-set-key (kbd "C-x g") 'goto-line)

;; kill compilation 
;; This is mainly when running terminal in emacs 
;; I usually don't do this anymore
;; (global-set-key (kbd "C-x k") 'kill-compilation)

;; mass comment 
(global-set-key (kbd "C-x /") 'comment-region)

;; mass uncomment 
(global-set-key (kbd "C-x .") 'uncomment-region)

;; copy 
(global-set-key (kbd "C-c c") 'kill-ring-save)

;; paste 
(global-set-key (kbd "C-v") 'yank)

;; 4 tabs 
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)

;; show clock
(display-time)

;; no bell noises 
(setq ring-bell-function 'ignore)

;; smooth scroll 
(setq redisplay-dont-pause t)

(setq redisplay-dont-pause t
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

;; no headaches with mouse scrolling
(setq mouse-wheel-scroll-amount '(4 ((shift) . 4))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil)
(toggle-scroll-bar -1)

;; make side by side buffers function the same as the main window 
(setq truncate-partial-width-windows nil)

;; no welcome menu
(setq inhibit-startup-message t)

;; easier scrolling 
(mouse-wheel-mode t)

;; allow undo tree for undo-ing / redo-ing
(require 'undo-tree)
(global-undo-tree-mode)

;; undo-ing things - bind the key
(define-key global-map (kbd "C-/") 'undo)

;; redo-ing things
;; NOTE: Possibily need the global
;; undo tree in order to do redo-ing
;; without installing a new package 
(define-key global-map (kbd "C-.") 'redo)

;; get to the actual end of the buffer thanks 
(setq scroll-error-top-bottom t)

;; Matching parenthesis rainbow
;; (require 'rainbow-delimiters)
;; (global-rainbow-delimiters-mode t)

;; I hate typing yes and no
(fset 'yes-or-no-p 'y-or-n-p)

;; show matching parens
(show-paren-mode 1)

;; stop the auto-indentation please 
;; (electric-indent-mode 0)
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))

;; Pairing parthensis and the likes 
;;(electric-pair-mode 1)

;; electric pair mode on curly braces 
;; (setq electric-pair-pairs
;;       '(
;;         (?\" . ?\")
;;         (?\{ . ?\})
;;         (?\" . ?\")
;;         (?\' . ?\')))

;; visual-line-mode 
(global-visual-line-mode t)

;; auto complete for different modes
(defun electric-pair ()
  "If at end of line, insert character pair without surrounding spaces.
    Otherwise, just insert the typed character."
  (interactive)
  (if (eolp) (let (parens-require-spaces) (insert-pair)) (self-insert-command 1)))

;; Auto indent region function  
(defun er-indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(defun er-indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (er-indent-buffer)
        (message "Indented buffer.")))))

;; Keybinding auto indent region
(global-set-key (kbd "C-f") 'er-indent-region-or-buffer)

;; show columns and rows 
(column-number-mode 1)

;; no fringes 
(set-fringe-mode 0)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; end of some changes ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Start maximised
;;(add-hook 'window-setup-hook 'toggle-frame-maximized t)

;;;;;;;;;;;;;;;;;;;;;;;;
;; Python development ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; scroll in the compilation buffer to the bottom 
(setq compilation-scroll-output t) 

;; Using the jupyter console will upgrade to jupyter qt console in the future 
;; when I have the time to read the documentation - specifically for inline plotting 
;; can't wait! 

;; (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
;; (setq python-shell-interpreter "jupyter"
;;       python-shell-interpreter-args "console --simple-prompt")
;; (setq python-shell-completion-native-enable nil)

;;;;;;;;;;;;;;;;;;;;
;;Python dev done ;;
;;;;;;;;;;;;;;;;;;;;

;; change here 
(require 'nasm-mode)

;; Some custom variables 
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (anzu fill-column-indicator rust-mode cherry-blossom-theme typing igrep nasm-mode jupyter go-autocomplete multiple-cursors go-mode night-owl-theme multi-term crosshairs pdfgrep highlight-numbers change-inner expand-region ace-window ac-ispell moe-theme delight diminish el-get ein python-cell zenburn-theme ipython ob-ipython undo-tree python-mode python))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Minor-mode changes 
(require 'delight)
(delight '((abbrev-mode "" abbrev)
           (undo-tree-mode nil "Undo-Tree")
           (emacs-lisp-mode "EL" :major)))
